# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# fisher null hypothesis testing (using alpha = 0.05, 10^3 replicates)
T_obs = mean(Y[Y$treated == 1,]$Y1) - mean(Y[Y$treated == 0,]$Y0)
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$Y1) - mean(Y[Y$treated_sim == 0,]$Y0)
}
mean(T_sim <= T_obs)
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# fisher null hypothesis testing (using alpha = 0.05, 10^3 replicates)
T_obs = mean(Y[Y$treated == 1,]$Y1) - mean(Y[Y$treated == 0,]$Y0)
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$Y1) - mean(Y[Y$treated_sim == 0,]$Y0)
}
mean(T_sim <= T_obs)
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# fisher null hypothesis testing (using alpha = 0.05, 10^3 replicates)
T_obs = mean(Y[Y$treated == 1,]$Y1) - mean(Y[Y$treated == 0,]$Y0)
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$Y1) - mean(Y[Y$treated_sim == 0,]$Y0)
}
mean(T_sim <= T_obs)
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# fisher null hypothesis testing (using alpha = 0.05, 10^3 replicates)
T_obs = mean(Y[Y$treated == 1,]$Y1) - mean(Y[Y$treated == 0,]$Y0)
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$Y1) - mean(Y[Y$treated_sim == 0,]$Y0)
}
mean(T_sim <= T_obs)
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# Setup
set.seed(12345)
n1 = n0 = 25
n = 50
Y1 = rnorm(n, 1/10, 1/16)
Y0 = rnorm(n, 0, 1/16)
Y = data.frame(cbind(Y1, Y0))
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
Y[Y$treated == 0,]$Y
Y[Y$treated == 0,]$outcome
Y[Y$treated == 1,]$outcome
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
T_obs
hist(T_sim)
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
mean(T_sim >= T_obs)
Y[Y$treated == 1,]$outcome - mean(Y[Y$treated == 1,]$outcome)
sum(Y[Y$treated == 1,]$outcome - mean(Y[Y$treated == 1,]$outcome))
(Y[Y$treated == 1,]$outcome - mean(Y[Y$treated == 1,]$outcome)^2)
sum((Y[Y$treated == 1,]$outcome - mean(Y[Y$treated == 1,]$outcome)^2))
pnorm(1.96, 0, 1, lower.tail = FALSE) +pnorm(-1.96.Neyman , 0, 1, lower.tail = TRUE)
pnorm(1.96, 0, 1, lower.tail = FALSE) +pnorm(-1.96 , 0, 1, lower.tail = TRUE)
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
# observed test statistic
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
# permutation test
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
# p-value
fisher_pval = mean(T_sim >= T_obs)
# Neyman Analysis (use asymptotic theory)
Y1_bar = mean(Y[Y$treated == 1,]$outcome)
Y0_bar = mean(Y[Y$treated == 0,]$outcome)
S1 = (1/(n1-1))*sum(((Y[Y$treated == 1,]$outcome - Y1_bar)^2))
S0 = (1/(n0-1))*sum(((Y[Y$treated == 0,]$outcome - Y0_bar)^2))
# conservative upper bound
S01 = (n0*n1 / n) * (((S1/n1)+(S0/n0))^2)
neyman_stat = T_obs / (sqrt(
(((n0*S1^2)/n1) + ((n1*S0^2)/n0) + 2*S01)/n))
neyman_pval = pnorm(neyman_stat, 0, 1, lower.tail = FALSE) +
pnorm(-1*neyman_stat, 0, 1, lower.tail = TRUE)
neyman_pval; fisher_pval
# Setup
set.seed(12345)
n1 = n0 = 25
n = 50
Y1 = rnorm(n, 1/10, 1/16)
Y0 = rnorm(n, 0, 1/16)
Y = data.frame(cbind(Y1, Y0))
fisher = numeric(1000)
neyman = numeric(1000)
for (j in 1:2) {
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
# observed test statistic
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
# permutation test
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
# p-value
fisher_pval = mean(T_sim >= T_obs)
fisher[j] = ifelse(fisher_pval < 0.05, 1, 0)
# Neyman Analysis (use asymptotic theory)
Y1_bar = mean(Y[Y$treated == 1,]$outcome)
Y0_bar = mean(Y[Y$treated == 0,]$outcome)
S1 = (1/(n1-1))*sum(((Y[Y$treated == 1,]$outcome - Y1_bar)^2))
S0 = (1/(n0-1))*sum(((Y[Y$treated == 0,]$outcome - Y0_bar)^2))
# conservative upper bound
S01 = (n0*n1 / n) * (((S1/n1)+(S0/n0))^2)
neyman_stat = T_obs / (sqrt(
(((n0*S1^2)/n1) + ((n1*S0^2)/n0) + 2*S01)/n))
neyman_pval = pnorm(neyman_stat, 0, 1, lower.tail = FALSE) +
pnorm(-1*neyman_stat, 0, 1, lower.tail = TRUE)
neyman[j] = ifelse(neyman_pval < 0.05, 1, 0)
}
fisher
neyman
sum(neyman)
sum(fisher)
sum(fisher)
sum(neyman)
sum(fisher)
sum(neyman)
# Setup
set.seed(12345)
n1 = n0 = 25
n = 50
Y1 = rnorm(n, 1/10, 1/16)
Y0 = rnorm(n, 0, 1/16)
Y = data.frame(cbind(Y1, Y0))
fisher = numeric(1000)
neyman = numeric(1000)
for (j in 1:1000) {
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
# observed test statistic
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
# permutation test
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
# p-value
fisher_pval = mean(T_sim >= T_obs)
fisher[j] = ifelse(fisher_pval < 0.05, 1, 0)
# Neyman Analysis (use asymptotic theory)
Y1_bar = mean(Y[Y$treated == 1,]$outcome)
Y0_bar = mean(Y[Y$treated == 0,]$outcome)
S1 = (1/(n1-1))*sum(((Y[Y$treated == 1,]$outcome - Y1_bar)^2))
S0 = (1/(n0-1))*sum(((Y[Y$treated == 0,]$outcome - Y0_bar)^2))
# conservative upper bound
S01 = (n0*n1 / n) * (((S1/n1)+(S0/n0))^2)
neyman_stat = T_obs / (sqrt(
(((n0*S1^2)/n1) + ((n1*S0^2)/n0) + 2*S01)/n))
neyman_pval = pnorm(neyman_stat, 0, 1, lower.tail = FALSE) +
pnorm(-1*neyman_stat, 0, 1, lower.tail = TRUE)
neyman[j] = ifelse(neyman_pval < 0.05, 1, 0)
}
fisher
sum(fisher)
sum(neyman)
# Setup
set.seed(12345)
n1 = n0 = 25
n = 50
Y1 = rnorm(n, 1/10, 1/16)
Y0 = rnorm(n, 0, 1/16)
Y = data.frame(cbind(Y1, Y0))
fisher = numeric(1000)
neyman = numeric(1000)
for (j in 1:5) {
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
# observed test statistic
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
# permutation test
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
# p-value
fisher_pval = mean(T_sim >= T_obs)
fisher[j] = fisher_pval
# Neyman Analysis (use asymptotic theory)
Y1_bar = mean(Y[Y$treated == 1,]$outcome)
Y0_bar = mean(Y[Y$treated == 0,]$outcome)
S1 = (1/(n1-1))*sum(((Y[Y$treated == 1,]$outcome - Y1_bar)^2))
S0 = (1/(n0-1))*sum(((Y[Y$treated == 0,]$outcome - Y0_bar)^2))
# conservative upper bound
S01 = (n0*n1 / n) * (((S1/n1)+(S0/n0))^2)
neyman_stat = T_obs / (sqrt(
(((n0*S1^2)/n1) + ((n1*S0^2)/n0) + 2*S01)/n))
neyman_pval = pnorm(neyman_stat, 0, 1, lower.tail = FALSE) +
pnorm(-1*neyman_stat, 0, 1, lower.tail = TRUE)
neyman[j] = neyman_pval
}
fisher
neyman
# Setup
set.seed(12345)
n1 = n0 = 25
n = 50
Y1 = rnorm(n, 1/10, 1/16)
Y0 = rnorm(n, 0, 1/16)
Y = data.frame(cbind(Y1, Y0))
fisher = numeric(1000)
neyman = numeric(1000)
for (j in 1:5) {
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
# observed test statistic
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
# permutation test
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
# p-value
fisher_pval = mean(T_sim >= T_obs)
fisher[j] = fisher_pval
# Neyman Analysis (use asymptotic theory)
Y1_bar = mean(Y[Y$treated == 1,]$outcome)
Y0_bar = mean(Y[Y$treated == 0,]$outcome)
S1 = (1/(n1-1))*sum(((Y[Y$treated == 1,]$outcome - Y1_bar)^2))
S0 = (1/(n0-1))*sum(((Y[Y$treated == 0,]$outcome - Y0_bar)^2))
# conservative upper bound
S01 = (n0*n1 / n) * (((S1/n1)+(S0/n0))^2)
neyman_stat = T_obs / (sqrt(
(((n0*S1^2)/n1) + ((n1*S0^2)/n0) + 2*S01)/n))
neyman_pval = pnorm(neyman_stat, 0, 1, lower.tail = FALSE) +
pnorm(-1*neyman_stat, 0, 1, lower.tail = TRUE)
neyman[j] = neyman_pval
}
# Setup
set.seed(12345)
n1 = n0 = 25
n = 50
Y1 = rnorm(n, 1/10, 1/16)
Y0 = rnorm(n, 0, 1/16)
Y = data.frame(cbind(Y1, Y0))
fisher = numeric(1000)
neyman = numeric(1000)
for (j in 1:1000) {
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
# observed test statistic
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
# permutation test
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
# p-value
fisher_pval = mean(T_sim >= T_obs)
fisher[j] = fisher_pval
# Neyman Analysis (use asymptotic theory)
Y1_bar = mean(Y[Y$treated == 1,]$outcome)
Y0_bar = mean(Y[Y$treated == 0,]$outcome)
S1 = (1/(n1-1))*sum(((Y[Y$treated == 1,]$outcome - Y1_bar)^2))
S0 = (1/(n0-1))*sum(((Y[Y$treated == 0,]$outcome - Y0_bar)^2))
# conservative upper bound
S01 = (n0*n1 / n) * (((S1/n1)+(S0/n0))^2)
neyman_stat = T_obs / (sqrt(
(((n0*S1^2)/n1) + ((n1*S0^2)/n0) + 2*S01)/n))
neyman_pval = pnorm(neyman_stat, 0, 1, lower.tail = FALSE) +
pnorm(-1*neyman_stat, 0, 1, lower.tail = TRUE)
neyman[j] = neyman_pval
}
# Setup
set.seed(12345)
n1 = n0 = 25
n = 50
Y1 = rnorm(n, 1/10, sqrt(1/16))
Y0 = rnorm(n, 0, sqrt(1/16))
Y = data.frame(cbind(Y1, Y0))
fisher = numeric(1000)
neyman = numeric(1000)
for (j in 1:1000) {
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
# observed test statistic
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
# permutation test
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
# p-value
fisher_pval = mean(T_sim >= T_obs)
fisher[j] = fisher_pval
# Neyman Analysis (use asymptotic theory)
Y1_bar = mean(Y[Y$treated == 1,]$outcome)
Y0_bar = mean(Y[Y$treated == 0,]$outcome)
S1 = (1/(n1-1))*sum(((Y[Y$treated == 1,]$outcome - Y1_bar)^2))
S0 = (1/(n0-1))*sum(((Y[Y$treated == 0,]$outcome - Y0_bar)^2))
# conservative upper bound
S01 = (n0*n1 / n) * (((S1/n1)+(S0/n0))^2)
neyman_stat = T_obs / (sqrt(
(((n0*S1^2)/n1) + ((n1*S0^2)/n0) + 2*S01)/n))
neyman_pval = pnorm(neyman_stat, 0, 1, lower.tail = FALSE) +
pnorm(-1*neyman_stat, 0, 1, lower.tail = TRUE)
neyman[j] = neyman_pval
}
fisher
fisher = fisher < 0.05
fisher
# 1 if p-value < 0.05 (reject null), 0 otherwise (fail to reject)
fisher = 1*(fisher < 0.05)
neyman = 1*(neyman < 0.05)
fisher
# Setup
set.seed(12345)
n1 = n0 = 25
n = 50
Y1 = rnorm(n, 1/10, sqrt(1/16))
Y0 = rnorm(n, 0, sqrt(1/16))
Y = data.frame(cbind(Y1, Y0))
fisher = numeric(1000)
neyman = numeric(1000)
for (j in 1:1000) {
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
# observed test statistic
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
# permutation test
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
# p-value
fisher_pval = mean(T_sim >= T_obs)
fisher[j] = fisher_pval
# Neyman Analysis (use asymptotic theory)
Y1_bar = mean(Y[Y$treated == 1,]$outcome)
Y0_bar = mean(Y[Y$treated == 0,]$outcome)
S1 = (1/(n1-1))*sum(((Y[Y$treated == 1,]$outcome - Y1_bar)^2))
S0 = (1/(n0-1))*sum(((Y[Y$treated == 0,]$outcome - Y0_bar)^2))
# conservative upper bound
S01 = (n0*n1 / n) * (((S1/n1)+(S0/n0))^2)
neyman_stat = T_obs / (sqrt(
(((n0*S1^2)/n1) + ((n1*S0^2)/n0) + 2*S01)/n))
neyman_pval = pnorm(neyman_stat, 0, 1, lower.tail = FALSE) +
pnorm(-1*neyman_stat, 0, 1, lower.tail = TRUE)
neyman[j] = neyman_pval
}
1*TRUE
# 1 if p-value < 0.05 (reject null), 0 otherwise (fail to reject)
results = data.frame(cbind(1*(fisher<0.05), 1*(neyman<0.05)))
results
# 1 if p-value < 0.05 (reject null), 0 otherwise (fail to reject)
results = data.frame(cbind(1*(fisher<0.05), 1*(neyman<0.05)))
colnames(results) = c("fisher", "neyman")
results
table(results)
# 1 if p-value < 0.05 (reject null), 0 otherwise (fail to reject)
results = data.frame(cbind(1*(fisher<0.05), 1*(neyman<0.05)))
colnames(results) = c("fisher", "neyman")
table(results)
sum(results[results$fisher == 1,]$neyman)
# Setup
set.seed(12345)
n1 = n0 = 25
n = 50
Y1 = rnorm(n, 1/10, sqrt(1/16))
Y0 = rnorm(n, 0, sqrt(1/16))
Y = data.frame(cbind(Y1, Y0))
fisher = numeric(1000)
neyman = numeric(1000)
for (j in 1:1000) {
# random assignment (25 to treatment, 25 to control)
inds = sample(n, 25)
Y$treated = 0
Y[inds, ]$treated = 1
# making outcome column based random treatment
Y$outcome = ifelse(Y$treated == 1, Y$Y1, Y$Y0)
# fisher permutation test (using alpha = 0.05, 10^3 replicates)
# observed test statistic
T_obs = mean(Y[Y$treated == 1,]$outcome) - mean(Y[Y$treated == 0,]$outcome)
# permutation test
T_sim = numeric(1000)
for (i in 1:1000) {
Y$treated_sim <- sample(Y$treated)
T_sim[i] = mean(Y[Y$treated_sim == 1,]$outcome) -
mean(Y[Y$treated_sim == 0,]$outcome)
}
# p-value
fisher_pval = mean(T_sim >= T_obs)
fisher[j] = fisher_pval
# Neyman Analysis (use asymptotic theory)
Y1_bar = mean(Y[Y$treated == 1,]$outcome)
Y0_bar = mean(Y[Y$treated == 0,]$outcome)
S1 = sqrt((1/(n1-1))*sum(((Y[Y$treated == 1,]$outcome - Y1_bar)^2)))
S0 = sqrt((1/(n0-1))*sum(((Y[Y$treated == 0,]$outcome - Y0_bar)^2)))
# conservative upper bound
# we can calculate S01 directly since we have counter factual
S01 = S1*S0
neyman_stat = T_obs / (sqrt(
(((n0*S1^2)/n1) + ((n1*S0^2)/n0) + 2*S01)/n))
neyman_pval = pnorm(neyman_stat, 0, 1, lower.tail = FALSE) +
pnorm(-1*neyman_stat, 0, 1, lower.tail = TRUE)
neyman[j] = neyman_pval
}
# 1 if p-value < 0.05 (reject null), 0 otherwise (fail to reject)
results = data.frame(cbind(1*(fisher<0.05), 1*(neyman<0.05)))
colnames(results) = c("fisher", "neyman")
table(results)
