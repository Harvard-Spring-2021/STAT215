# YOUR SCRIPTS HERE
data = read.delim("p3/DI_data.txt", header = F)
View(data)
![Alignment Stats](QI.1.3/)
![Alignment Stats](QI.1.3/)
![Alignment Stats](QI.1.3/)
![Alignment Stats](QI.1.3/)
![Alignment Stats](QI.1.3/)**I.2 (1.5 pts) Methylation in cytosine at promoter regions normally suppresses the gene expression, while H3K4me3 and H3K27ac histone modifications at promoter regions imply higher gene expression. We have processed RRBS-seq data on the prostater cancer cell line dataset(https://www.encodeproject.org/experiments/ENCSR859PDD/) and report the high methylation signal sites in `data/Methylation.bed`. Draw violin plots of the expression level of genes with methylation, H3K4me3, and H3K27ac in their promoters. Could you find that the higher methylation signals repress the gene expression?**
install.packages("RColorBrewer")
install.packages("ggplot")
install.packages("ggplot2")
library(RColorBrewer)
library(ggplot2)
H3K4me3 = read.delim("QI.2/H3K4me3.txt", header=F)
H3K27ac = read.delim("QI.2/H3K27ac.txt", header=F)
Methylation = read.delim("QI.2/Methylation.txt", header=F)
View(H3K27ac)
View(H3K4me3)
View(Methylation)
library(RColorBrewer)
library(ggplot2)
H3K4me3 = read.delim("QI.2/H3K4me3.txt", header=F)
H3K27ac = read.delim("QI.2/H3K27ac.txt", header=F)
Methylation = read.delim("QI.2/Methylation.txt", header=F)
nrow(H3K4me3); nrow(H3K27ac); nrow(Methylation)
H3K4me3$V4
min(H3K4me3$V4)
min(Methylation$V4)
sort(Methylation$V4)
H3K4me3 = read.delim("QI.2/H3K4me3.txt", header=F)
expr_df = data.frame(expr = c(H3k4me3, H3k27ac, Methylation, Background), state = c(rep("H3k4me3", length(H3k4me3)), rep("H3k27ac", length(H3k27ac)), rep("Methylation", length(Methylation)), rep("Background", length(Background))))
library(RColorBrewer)
library(ggplot2)
Background = read.delim("QI.2/Background.txt", header=F)
H3k4me3 = read.delim("QI.2/H3K4me3.txt", header=F)
H3k27ac = read.delim("QI.2/H3K27ac.txt", header=F)
Methylation = read.delim("QI.2/Methylation.txt", header=F)
nrow(H3K4me3); nrow(H3K27ac); nrow(Methylation)
expr_df = data.frame(expr = c(H3k4me3, H3k27ac, Methylation, Background), state = c(rep("H3k4me3", length(H3k4me3)), rep("H3k27ac", length(H3k27ac)), rep("Methylation", length(Methylation)), rep("Background", length(Background))))
expr_df = data.frame(expr = c(H3k4me3, H3k27ac, Methylation, Background), state = c(rep("H3k4me3", length(H3k4me3)), rep("H3k27ac", length(H3k27ac)), rep("Methylation", length(Methylation)), rep("Background", length(Background))))
expr_df <- data.frame(expr = c(H3k4me3, H3k27ac, Methylation, Background), state = c(rep("H3k4me3", length(H3k4me3)), rep("H3k27ac", length(H3k27ac)), rep("Methylation", length(Methylation)), rep("Background", length(Background))))
expr_df <- data.frame(expr = c(H3k4me3$V4, H3k27ac$V4, Methylation$V4, Background$V4), state = c(rep("H3k4me3", length(H3k4me3)), rep("H3k27ac", length(H3k27ac)), rep("Methylation", length(Methylation)), rep("Background", length(Background))))
c(rep("H3k4me3", length(H3k4me3)), rep("H3k27ac", length(H3k27ac)), rep("Methylation", length(Methylation)), rep("Background", length(Background)))
c(rep("H3k4me3", length(H3k4me3$V4)), rep("H3k27ac", length(H3k27ac)), rep("Methylation", length(Methylation)), rep("Background", length(Background)))
expr_df <- data.frame(expr = c(H3k4me3$V4, H3k27ac$V4, Methylation$V4, Background$V4), state = c(rep("H3k4me3", length(H3k4me3$V4)), rep("H3k27ac", length(H3k27ac$V4)), rep("Methylation", length(Methylation$V4)), rep("Background", length(Background$V4))))
# expr_background = Background$V4
View(expr_df)
expr_df = data.frame(expr = c(H3k4me3$V4, H3k27ac$V4, Methylation$V4, Background$V4), state = c(rep("H3k4me3", length(H3k4me3$V4)), rep("H3k27ac", length(H3k27ac$V4)), rep("Methylation", length(Methylation$V4)), rep("Background", length(Background$V4))))
getPalette <- colorRampPalette(brewer.pal(8, "Set2"))
ggplot(expr_df) +
geom_violin(aes(x = state, y = expr, fill = state)) +
theme_bw() +
theme(
axis.text.x = element_text(size = 10, face = "bold", hjust = 0.5, vjust = 0.5, angle = -45),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
) +
scale_fill_manual(values = getPalette(length(unique(expr_df$state)))) +
ylim(0.0001, 10) +
scale_y_log10()
expr_df = data.frame(expr = c(H3k4me3$V4, H3k27ac$V4, Methylation$V4, Background$V4), state = c(rep("H3k4me3", length(H3k4me3$V4)), rep("H3k27ac", length(H3k27ac$V4)), rep("Methylation", length(Methylation$V4)), rep("Background", length(Background$V4))))
getPalette <- colorRampPalette(brewer.pal(8, "Set2"))
ggplot(expr_df) +
geom_violin(aes(x = state, y = expr, fill = state)) +
theme_bw() +
theme(
axis.text.x = element_text(size = 10, face = "bold", hjust = 0.5, vjust = 0.5, angle = -45),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
) +
scale_fill_manual(values = getPalette(length(unique(expr_df$state)))) +
ylim(0.0001, 10) +
scale_y_log10()
expr_df = data.frame(expr = c(H3k4me3$V4, H3k27ac$V4, Methylation$V4, Background$V4), state = c(rep("H3k4me3", length(H3k4me3$V4)), rep("H3k27ac", length(H3k27ac$V4)), rep("Methylation", length(Methylation$V4)), rep("Background", length(Background$V4))))
getPalette <- colorRampPalette(brewer.pal(8, "Set2"))
ggplot(expr_df) +
geom_violin(aes(x = state, y = expr, fill = state)) +
theme_bw() +
theme(
axis.text.x = element_text(size = 10, face = "bold", hjust = 0.5, vjust = 0.5, angle = -45),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
) +
scale_fill_manual(values = getPalette(length(unique(expr_df$state)))) +
ylim(0.0001, 10) +
scale_y_log10()
View(data)
View(data)
# YOUR SCRIPTS HERE
data = read.delim("p3/DI_data.txt", header = F, col.names = c("chr", "start", "end", "DI"))
View(data)
# YOUR SCRIPTS HERE
# load the data
data = read.delim("p3/DI_data.txt", header = F, col.names = c("chr", "start", "end", "DI"))
data$mid = (data$end + data$start) / 2
# making plots
plot_df = as.data.frame(cbind(mid_point = data$mid, DI = data$DI))
ggplot(plot_df, aes(x = as.numeric(as.character(mid_point)),
y = as.numeric(as.character(DI)))) +
geom_point() +
labs(y = "Midpoints", x = "DI Score") +
ggtitle("Hidden") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
geom_col(width = 0.5)
# YOUR SCRIPTS HERE
# load the data
data = read.delim("p3/DI_data.txt", header = F, col.names = c("chr", "start", "end", "DI"))
data$mid = (data$end + data$start) / 2
# making plots
plot_df = as.data.frame(cbind(mid_point = data$mid, DI = data$DI))
ggplot(plot_df, aes(x = as.numeric(as.character(mid_point)),
y = as.numeric(as.character(DI)))) +
geom_point() +
labs(y = "Midpoints", x = "DI Score") +
ggtitle("Hidden Markov Model Data") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
geom_col(width = 0.5)
# YOUR SCRIPTS HERE
# load the data
data = read.delim("p3/DI_data.txt", header = F, col.names = c("chr", "start", "end", "DI"))
data$mid = (data$end + data$start) / 2
# making plots
plot_df = as.data.frame(cbind(mid_point = data$mid, DI = data$DI))
ggplot(plot_df, aes(x = as.numeric(as.character(mid_point)),
y = as.numeric(as.character(DI)))) +
geom_point() +
labs(y = "Midpoints", x = "DI Score") +
ggtitle("Hidden Markov Model Data - Initial Graph") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
geom_col(width = 0.5)
# YOUR R SCRIPTS HERE
with_loop = read.delim("QII.4/final_output.txt", header=F)
without_loop = read.delim("QII.4/expr_loc_chr21_output", header=F)
# YOUR R SCRIPTS HERE
with_loop = read.delim("QII.4/final_output.txt", header=F)
without_loop = read.delim("QII.4/expr_loc_chr21_output.txt", header=F)
expr_df = data.frame(expr = c(with_loop$V4, without_loop$V4), state = c(rep("With Loop", length(with_loop$V4)), rep("Without Loop", length(without_loop$V4))))
getPalette <- colorRampPalette(brewer.pal(8, "Set2"))
ggplot(expr_df) +
geom_violin(aes(x = state, y = expr, fill = state)) +
theme_bw() +
theme(
axis.text.x = element_text(size = 10, face = "bold", hjust = 0.5, vjust = 0.5, angle = -45),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
) +
scale_fill_manual(values = getPalette(length(unique(expr_df$state)))) +
ylim(0.0001, 10) +
scale_y_log10()
# YOUR R SCRIPTS HERE
with_loop = read.delim("QII.4/final_output.txt", header=F)
without_loop = read.delim("QII.4/expr_loc_chr21_output.txt", header=F)
expr_df = data.frame(expr = c(with_loop$V4, without_loop$V4), state = c(rep("With Loop", length(with_loop$V4)), rep("Without Loop", length(without_loop$V4))))
getPalette <- colorRampPalette(brewer.pal(8, "Set2"))
ggplot(expr_df) +
geom_violin(aes(x = state, y = expr, fill = state)) +
theme_bw() +
theme(
axis.text.x = element_text(size = 10, face = "bold", hjust = 0.5, vjust = 0.5, angle = -45),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
) +
scale_fill_manual(values = getPalette(length(unique(expr_df$state)))) +
ylim(0.0001, 10) +
scale_y_log10()
# YOUR R SCRIPTS HERE
with_loop = read.delim("QII.4/final_output.txt", header=F)
without_loop = read.delim("QII.4/expr_loc_chr21_output.txt", header=F)
expr_df = data.frame(expr = c(with_loop$V4, without_loop$V4), state = c(rep("Target Gene", length(with_loop$V4)), rep("General Gene", length(without_loop$V4))))
getPalette <- colorRampPalette(brewer.pal(8, "Set2"))
ggplot(expr_df) +
geom_violin(aes(x = state, y = expr, fill = state)) +
theme_bw() +
theme(
axis.text.x = element_text(size = 10, face = "bold", hjust = 0.5, vjust = 0.5, angle = -45),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
) +
scale_fill_manual(values = getPalette(length(unique(expr_df$state)))) +
ylim(0.0001, 10) +
scale_y_log10()
# make discrete states from continuous indices
obs_states = cut(data$DI, breaks = c(min(data$DI) - 1,
-1200, -800, -500, 0,
500, 800, 1200, max(data$DI) + 1),
right = FALSE)
# Viterbi algorithm
Viterbi = function(v, a, b, initial_distribution) {
T = length(v)   # number of time points
M = nrow(a)     # number of hidden states
prev = matrix(0, T-1, M)    # matrix storing from which previous hidden state
omega[, 1] = log(initial_distribution * b[, v[1]])  # log scale - prevent underflow
# iterate through time points
for (t in 2:T) {
# iterate through hidden state
for (s in 1:M) {
probs = omega[, t-1] + log(a[, s]) + log(b[s, v[t]])
prev[t-1, s] = which.max(probs)
omega[s, t] = max(probs)
}
}
S = rep(0, T)
last_state = which.max(omega[, ncol(omega)])
S[1] = last_state
j = 2
for (i in (T-1):1){
S[j] = prev[i, last_state]
last_state = prev[i, last_state]
j = j + 1
}
S[which(S==1)] = 'up'       # upstream
S[which(S==2)] = 'down'     # downstream
S = rev(S)
return(S)
}
# initialize our hidden markov model
M = 2   # hidden states (upstream vs downstream)
K = 8   # output type - 8 possible outputs
A = matrix(c(0.9, 0.1, 0.1, 0.9), M, M)     # transition probabilities
B = matrix(c(0.01, 0.01, 0.02, 0.04, 0.65, 0.15, 0.08, 0.04,
0.04, 0.08, 0.15, 0.65, 0.04, 0.02, 0.01, 0.01),
M, K, byrow = TRUE)              # emission probabilities
initial_distribution = c(0.5, 0.5)
# make our hidden markov model
hmm = Viterbi(as.numeric(obs_states), A, B, initial_distribution)
# make discrete states from continuous indices
obs_states = cut(data$DI, breaks = c(min(data$DI) - 1,
-1200, -800, -500, 0,
500, 800, 1200, max(data$DI) + 1),
right = FALSE)
# Viterbi algorithm
Viterbi = function(v, a, b, initial_distribution) {
T = length(v)   # number of time points
M = nrow(a)     # number of hidden states
prev = matrix(0, T-1, M)    # matrix storing from which previous hidden state
omega = matrix(0, M, T)     # matrix storing probability of each hidden state
omega[, 1] = log(initial_distribution * b[, v[1]])  # log scale - prevent underflow
# iterate through time points
for (t in 2:T) {
# iterate through hidden state
for (s in 1:M) {
probs = omega[, t-1] + log(a[, s]) + log(b[s, v[t]])
prev[t-1, s] = which.max(probs)
omega[s, t] = max(probs)
}
}
S = rep(0, T)
last_state = which.max(omega[, ncol(omega)])
S[1] = last_state
j = 2
for (i in (T-1):1){
S[j] = prev[i, last_state]
last_state = prev[i, last_state]
j = j + 1
}
S[which(S==1)] = 'up'       # upstream
S[which(S==2)] = 'down'     # downstream
S = rev(S)
return(S)
}
# initialize our hidden markov model
M = 2   # hidden states (upstream vs downstream)
K = 8   # output type - 8 possible outputs
A = matrix(c(0.9, 0.1, 0.1, 0.9), M, M)     # transition probabilities
B = matrix(c(0.01, 0.01, 0.02, 0.04, 0.65, 0.15, 0.08, 0.04,
0.04, 0.08, 0.15, 0.65, 0.04, 0.02, 0.01, 0.01),
M, K, byrow = TRUE)              # emission probabilities
initial_distribution = c(0.5, 0.5)
# make our hidden markov model
hmm = Viterbi(as.numeric(obs_states), A, B, initial_distribution)
# plot the result
plot_df = as.data.frame(cbind(mid_point = data$mid, DI = data$DI, state = hmm))
ggplot(plot_df, aes(x = as.numeric(as.character(mid_point)),
y = as.numeric(as.character(DI)),
color = as.factor(state))) +
geom_point() +
labs(y = "Midpoints", x = "DI Score") +
ggtitle("Hidden Markov Model Completed Graph") +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5)) +
geom_col(width = 0.5)
0.0109 * 503
